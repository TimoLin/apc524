/*!

\mainpage CHEMTABLE GENERATOR - Beta Version

Emmet Cleary, Daniel Floryan, Jeffry Lew, Bruce Perry, Emre Turkoz

APC524 - Fall 2014

------------------------------------------------------------------

\section _1_ INTRODUCTION

This file includes instructions for building and running the chemtable generator software. This software processes .kg data files produced by FlameMaster, producing a table of chemical source terms (chemtable) and various plots for visualizing the data. The program is run by executing a single Python script (chemtable_io.py) as described below.

------------------------------------------------------------------

\section _2_ INSTALLATION

The user interface for this version of the software (and a few helper functions) is written in Python and is ready to use. However, the Python code also contains calls to C++ functions (connected through SWIG) which must be compiled and wrapped before the software can be run, as described below. Building the program generates a variety of shared libraries containing the C++ functions which can be called from Python.

Building the program (compiling and wrapping C++ functions):
     - From the current (home) directory, type "make".
     - "make cleanall" removes all files generated by make.
     - "make cleanlib" removes all external library object files.
     - "make clean" removes all compiled source code/modules.

External libraries/Modules/Files needed (*denotes files included with this software):
     - Python v. 2.6
     - *AlgLib v. 3.9.0 C++ version (for glquad.cc and hermiteinterp.cc)
     - SWIG
     - MatPlotLib
     - Numpy
     - *Numpy.i for SWIG

Generated shared libraries:
     - _convolute.so
     - _fittogrid.so
     - _integrator.so
     - _interpolator.so
     - _leastnonmono.so
     - _matrix3d.so
     - _matrix4d.so
     - _matrix.so
     - _maxslope.so
     - _monocheck.so
     - _pdf.so
     - _sorting.so

Capabilities of shared library functions:
    - Monotonicity checks and slope tests
    - Sorting
    - Probability Density Functions (PDFs)
    - Convolution with delta or beta PDFs
    - Grid fitting
    - Interpolation

--------------------------------------------------------------------

\section _3_ RUNNING THE PROGRAM 

After building, the chemtable generation program is run by executing a single Python script (chemtable_io.py) as described below. The program (fittogrid function) has been parallelized using OpenMP and can be run on multiple cores by changing the appropriate value in the input file.

Command: ./chemtable_io.py OR python chemtable_io.py

Inputs:
     - 'chemtable_inputs' text file (must be in same directory as chemtable_io.py)
     - '*.kg' datafiles (in directory as specified in chemtable_inputs file)

Outputs (written to /output/ directory):
     - text data file (name specified in  chemtable_inputs file) containing tabulated source terms as a function of Cmean, Zmean, and Zvar (4 columns of data)
     - 'CvsTemp.pdf' plot of the chosen progress variable vs. temperature to verify monotonicity
     - 'contour_zvar_XXX.pdf' contour plots of the chemical source term vs. Cmean and Zmean for up to 10 values of Zvar
     - Several status messages, including the identity of the best progress variable, are printed to the terminal

DETAILED INPUT FILE DESCRIPTION:

Inputs are specified with the following syntax:
<inputname:>\t<inputvalue1>\t<inputvalue2>\t<inputvalue3>... 

Each input name must appear on only one line. A value for every input must be specified unless it has a DEFAULT value specified. The table below lists the possible inputs and indicates which have default values.

INPUT:					DEFAULT			<NOTES>		
- data file directory:			data			<can specify a path, eg data/C2H4>
- test species:				Y-H2O	Y-H2 	Y-CO2
- output file name:			data_output
- plot all progress variables:		yes
- skip progress variable optimization:	no
- number of threads:			1			<integer>
- Zpdf:					[none]			<options: delta, beta>
- sort method:				bubble			<other options: standard, brute>
- interp method:			linear			<other options: hermite, cubic>
- least nonmonotonic check:		simple			<other options: advanced>
- max slope test:			linear regression	<other options: endpointslope>
- integrator:				trapezoid		<other options: glquad, simpson>
- StoichMassFrac:			0.055
- glq Number of Nodes:			50			<integer>
- length Cgrid: 			20			<integer>
- Zvar_max:				[none]			<integer>
- Zvar_grid:				[none]			<integer>		
- Zmean_grid:				Z			<if Z, set to be same as the Zgrid in
								Flamelet files, otherwise, an integer>

DETAILED DATAFILE DESCRIPTION:

The program is designed specifically to run on .kg datafiles. The first line of the datafiles is expected to be blank and is ignored. The following requirements exist for processing the datafiles:
     - All files in the data file directory specified by the user must be .kg files
     - No file may be repeated. 
     - All files must have the same column headers and the same number of rows of data. 
     - 2nd line contains column headers, 3rd line and on contain data
     - Column headers for production rate should be: 'ProdRate<SPECIES> [kg/m^3s]'

Two sets of sample data files are included:
     - data/C2H4: full output from FlameMaster for a C2H4 flame
     - data/C2H4truncated: a subset of the above selected to be a "well-behaved" test case

--------------------------------------------------------------------

\section _4_ DETAILED DOCUMENTATION 
For detailed documentation of all classes and functions used by this program, see the Doxygen-generated HTML documentation.

*/
